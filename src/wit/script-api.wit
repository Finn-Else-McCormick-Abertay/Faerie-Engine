package faerie:script-api;

interface script-lifecycle {
	init: func();
	namespace: func() -> string;
}

interface process-hook {
	process: func(delta: f64);
}

interface ecs {
	record vec3 { x: f32, y:f32, z:f32 }

	resource transform {
		get-position: func() -> vec3;
		set-position: func(pos: vec3);
		move: func(vec: vec3);
	}

	resource hierarchy {
		add-child: func(entity: entity);
		get-children: func() -> list<entity>;
		get-descendants: func() -> list<entity>;
	}

	resource camera {
		set-active: func();
	}

	resource entity {
		constructor(id: u32);

		create: static func() -> entity;

		add-transform: func() -> transform;
		add-hierarchy: func() -> hierarchy;
		add-camera: func() -> camera;
		instantiate-model: func(model-path: string);
		add-material: func(material-name: string);
	}

	load-material: func(vert-shader-path: string, frag-shader-path: string, material-name:string);
	load-model: func(model-path: string);
}

interface input {
	enum scancode {
		a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z,
		one, two, three, four, five, six, seven, eight, nine, zero,
		minus, equals, left-bracket, right-bracket,
		comma, period, slash, semicolon, apostrophe, backslash,
		left, right, up, down, home, end, pageup, pagedown, delete,
		numpad-one, numpad-two, numpad-three, numpad-four, numpad-five, numpad-six, numpad-seven, numpad-eight, numpad-nine, numpad-zero,
		numpad-period, numpad-divide, numpad-multiply, numpad-minus, numpad-plus, numpad-enter,
		return, escape, backspace, tab, space,
		function-one, function-two, function-three, function-four, function-five, function-six, function-seven, function-eight,
		function-nine, function-ten, function-eleven, function-twelve
	}
	enum controller-button {
		a, b, x, y, back, guide, start,
		left-stick, right-stick, left-shoulder, right-shoulder,
		dpad-up, dpad-down, dpad-left, dpad-right,
		misc, touchpad
	}
	enum mouse-button { left, middle, right, x-one, x-two }
	enum controller-stick { left, right }
	enum controller-trigger { left, right }
	enum mouse-motion-source { mouse-motion, mouse-wheel }

	bind-physical-scancode: func(action: string, scancode: scancode);
	bind-logical-keycode: func(action: string, keycode: char);
	bind-controller-button: func(action: string, button: controller-button);
	bind-controller-stick: func(action: string, tick: controller-stick);
	bind-controller-trigger: func(action: string, stick: controller-trigger);
	bind-mouse-button: func(action: string, button: mouse-button);
	bind-mouse-motion: func(action: string, source: mouse-motion-source);
	
	unbind-physical-scancode: func(action: string, scancode: scancode);
	unbind-logical-keycode: func(action: string, keycode: char);
	unbind-controller-button: func(action: string, button: controller-button);
	unbind-controller-stick: func(action: string, stick: controller-stick);
	unbind-controller-trigger: func(action: string, stick: controller-trigger);
	unbind-mouse-button: func(action: string, button: mouse-button);
	unbind-mouse-motion: func(action: string, source: mouse-motion-source);
	
	has-physical-scancode: func(action: string, scancode: scancode) -> bool;
	has-logical-keycode: func(action: string, keycode: char) -> bool;
	has-controller-button: func(action: string, button: controller-button) -> bool;
	has-controller-stick: func(action: string, stick: controller-stick) -> bool;
	has-controller-trigger: func(action: string, stick: controller-trigger) -> bool;
	has-mouse-button: func(action: string, button: mouse-button) -> bool;
	has-mouse-motion: func(action: string, source: mouse-motion-source) -> bool;
}

interface input-listen {
	record vec2 {
		x: f32,
		y: f32
	}

	variant input-event {
		press(bool),
		motion(vec2)
	}
	
	on-input: func(action: string, event: input-event);
}

world script {
	export script-lifecycle;
	import input;
	import ecs;
}

world script-all {
	include script;
	export process-hook;
	export input-listen;
}