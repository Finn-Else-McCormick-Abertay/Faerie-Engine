package faerie:script-api;

interface script-lifecycle {
	init: func();
}

interface process-hook {
	process: func(delta: f64);
}

interface ecs {
	resource entity {
		create: static func() -> entity;
	}
}

interface input {
	/*
	enum scancode {
		a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z,
		-1, -2, -3, -4, -5, -6, -7, -8, -9, -0,
		minus, equals, left-bracket, right-bracket,
		comma, period, slash, semicolon, apostrophe, backslash,
		left, right, up, down, home, end, pageup, pagedown, delete,
		numpad-1, numpad-2, numpad-3, numpad-4, numpad-5, numpad-6, numpad-7, numpad-8, numpad-9, numpad-0,
		numpad-period, numpad-divide, numpad-multiply, numpad-minus, numpad-plus, numpad-enter,
		return, escape, backspace, tab, space,
		f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12
	}
	enum controller-button {
		a, b, x, y, back, guide, start,
		left-stick, right-stick, left-shoulder, right-shoulder,
		dpad-up, dpad-down, dpad-left, dpad-right,
		misc, touchpad
	}
	enum mouse-button { left, middle, right, x1, x2 }
	enum controller-stick { left, right }
	enum controller-trigger { left, right }
	enum mouse-motion-source { mouse-motion, mouse-wheel }

	bind-physical-scancode: func(action: string, scancode: scancode);
	bind-logical-keycode: func(action: string, keycode: char);
	bind-controller-button: func(action: string, button: controller-button);
	bind-controller-stick: func(action: string, tick: controller-stick);
	bind-controller-trigger: func(action: string, stick: controller-trigger);
	bind-mouse-button: func(action: string, button: mouse-button);
	bind-mouse-motion: func(action: string, source: mouse-motion-source);
	
	unbind-physical-scancode: func(action: string, scancode: scancode);
	unbind-logical-keycode: func(action: string, keycode: char);
	unbind-controller-button: func(action: string, button: controller-button);
	unbind-controller-stick: func(action: string, stick: controller-stick);
	unbind-controller-trigger: func(action: string, stick: controller-trigger);
	unbind-mouse-button: func(action: string, button: mouse-button);
	unbind-mouse-motion: func(action: string, source: mouse-motion-source);
	
	has-physical-scancode: func(action: string, scancode: scancode) -> bool;
	has-logical-keycode: func(action: string, keycode: char) -> bool;
	has-controller-button: func(action: string, button: controller-button) -> bool;
	has-controller-stick: func(action: string, stick: controller-stick) -> bool;
	has-controller-trigger: func(action: string, stick: controller-trigger) -> bool;
	has-mouse-button: func(action: string, button: mouse-button) -> bool;
	has-mouse-motion: func(action: string, source: mouse-motion-source) -> bool;
	*/
}

interface input-listen {
	record input-event {
		action: string,
		//event: variant {
		//	press(bool),
		//	motion(record{ x: f32, y: f32 })
		//}
	}
	
	on-input: func(event: input-event);
}

world script {
	export script-lifecycle;
	import input;
	import ecs;
}